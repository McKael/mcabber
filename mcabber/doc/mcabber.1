.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MCABBER" 1 "" "" ""
.SH NAME
mcabber \- a simple Jabber console client
.SH "SYNOPSIS"


mcabber [ \-f configfile ] [ --help | \-h ]

.SH "DESCRIPTION"


mcabber(1) is a small Jabber console client\&. For now it needs a configuration file to start, so please copy the sample mcabberrc file and adapt your connection settings\&.


You also need to have an existing Jabber account to use this software, as it cannot (un)register accounts yet\&.


The mcabber(1) screen is divided into 4 regions\&. The \fIroster\fR, alias \fIbuddylist\fR, is on the left\&. The \fIchat window\fR, or chat buffer, is on the right\&. The \fIinput line\fR lies at the bottom of the screen, under a small \fIlog window\fR\&.


Two status lines surround the log window\&. The bottom status line is the "main status line" and reflects mcabber general status\&. The other line is the "chat status line" and shows the status of the currently selected buddy\&.


To display buddies chat buffers, you will have to enter \fIchat mode\fR\&. You can enter chat mode by pressing enter, and leave chat mode with the ESC key\&. Simply sending a message will also enable chat mode\&.


Here are some of the features of mcabber:

.TP 3
\(bu
 SSL support\&.
.TP
\(bu
 MUC support (Multi\-User Chat)\&.
.TP
\(bu
 History logging: If enabled (see the CONFIGURATION FILE section), mcabber can save discussions to history log files\&.
.TP
\(bu
 Commands completion: If possible, mcabber will try to complete your command line if you hit the Tab key\&.
.TP
\(bu
 Input line history: Any message or command entered is in the input line history and can be reused easily\&.
.TP
\(bu
 External actions: Some events (like receiving a message) can trigger an external action, for example a shell script (you need to enable it in your configuration file)\&. A sample events script ("eventcmd") is provided with mcabber source code, in the contrib directory\&.
.LP

.SH "OPTIONS"

.TP
\-\-help, \-h
Quick help usage message

.TP
\-f configfile
Use configuration file configfile 

.SH "KEYS"


Text typing occurs in the \fIinput line\fR; basic operations are supported (left arrow, right arrow, home/end keys, insert, delete, backspace...)\&.


PageUp and PageDown keys are used to move in the roster\&.


Up and Down arrow keys can be used to move in the input line history; they jump to the previous/next line from the history beginning with the same string (from first column to the cursor column)\&.


To send a message, move to the choosen buddy in the buddylist, type your message and hit enter\&. If the line begins with a slash, this will be interpreted as a command (see the COMMAND section below)\&. Hit escape to leave the chat mode\&.

Here is a quick description of the key bindings:

Ctrl\-a		Go to the beginning of the input line

Ctrl\-e		Go to the end of the input line

Ctrl\-l		Force a refresh

Up/Down     	Move in the input line history

PgUp/PgDown	Move inside the roster (buddylist)

Tab    		Complete current word, in the input line

Ctrl\-g		Cancel completion / ctrl\-g

Ctrl\-p/Ctrl\-n	Scroll up/down half a screen in the buffer window (chat mode)

Ctrl\-Left 	Move the cursor back to the start of the current or previous word

Ctrl\-Right	Move the cursor forward to the end of the current or next word

Ctrl\-u		Delete from beginning of the line to the cursor

Ctrl\-k		Delete from the cursor to the end of line

Ctrl\-w		Backward kill word

Ctrl\-t		Transpose chars

Ctrl\-o		Accept line and put the next history line in the input line (accept\-line\-and\-down\-history)

Ctrl\-q		Jump to the next unread message


.SH "COMMANDS"

.TP
\fB/add\fR [jid [nickname]]
Add the "jid" Jabber user to our roster (default group), and send a notification request to this buddy\&. If no nickname is specified, the jid is used\&. If no jid (or an empty string "") is provided or if jid is "\&.", the current buddy is used\&.

.TP
\fB/alias\fR name = command line
Add "name" as an alias for "command line"\&.

Aliases are expanded only once, thus they can not be chained\&. "/alias name" displays the value associated with the "name" alias; "/alias name =" unsets the "name" alias\&.

Example: "/alias away = status away"\&.

.TP
\fB/authorization\fR allow|cancel|request|request_unsubscribe [jid]
Manage the presence subscriptions\&.

If no jid is provided, the current buddy is used\&.

 \fBallow\fR  	allow the buddy to receive your presence updates
 \fBcancel\fR 	cancel the buddy' subscription to your presence updates
 \fBrequest\fR	request a subscription to the buddy's presence updates
 \fBrequest_unsubscribe\fR request unsubscription from the buddy's presence updates

.TP
\fB/bind\fR keycode = command line
Bind a command line to the key with the "keycode" code number\&.

Keycodes of unused keys are displayed by mcabber in the log window when pressing the key, for example "Unknown key=265"\&. "/bind keycode" displays the command line bound to the given keycode; "/bind keycode" unbinds the given keycode\&.

Note: aliases can be used in key bindings\&.

Example: "/bind 265 = status online" (265 is F1 for me, but it may depend on your ncurses installation)\&.

.TP
\fB/buffer\fR clear|top|bottom|date|%|search_backward|search_forward
The buffer command manipulates the current buddy's buffer (chat window)\&.

 \fBclear\fR      	clear the current buddy chat window
 \fBbottom\fR     	jump to the bottom of the current buddy chat buffer
 \fBtop\fR        	jump to the top of the current buddy chat buffer
 \fBup\fR [n]     	scroll the buffer up n lines (default: half a screen)
 \fBdown\fR [n]   	scroll the buffer down n lines (default: half a screen)
 \fBdate\fR date  	jump to the first line after the specified date in the chat buffer (date format: "YYYY\-mm\-dd[THH:MM:SS]", "\-" and ":" are optional)
 \fB%\fR n        	jump to position %n of the buddy chat buffer
 \fBsearch_backward\fR text	search for "text" in the current buddy chat buffer
 \fBsearch_forward\fR  text	search for "text" in the current buddy chat buffer

.TP
\fB/clear\fR
The clear command is actually an alias for "/buffer clear"\&.

.TP
\fB/connect\fR
Establish connection to the Jabber server\&.

.TP
\fB/del\fR
Delete the current buddy from our roster, unsubscribe from its presence notification and unsubscribe it from ours\&.

.TP
\fB/disconnect\fR
Terminate connection to the Jabber server\&. Note: the roster is only available when the connection to the server is active, so the buddylist is empty when disconnected\&.

.TP
\fB/event\fR #n|* accept|ignore|reject, \fB/event\fR list
Tell mcabber what to do about a pending event\&. If the first parameter is "*", the command will apply to all queued events\&.

 \fBaccept\fR	accept the event #n
 \fBignore\fR	remove the event #n from the list
 \fBreject\fR	reject the event #n
 \fBlist\fR	list all pending events

.TP
\fB/group\fR fold|unfold|toggle
The group command changes the current group display\&.

 \fBfold\fR  	fold (shrink) the current group tree in the roster
 \fBunfold\fR	unfold (expand) the current group tree in the roster
 \fBtoggle\fR	toggle the state (fold/unfold) of the current tree

.TP
\fB/info\fR
Display info on the selected entry (user, agent, group...)\&. For users, resources are displayed with the status, priority and status message (if available) of each resource\&.

.TP
\fB/move\fR [groupname]
Move the current buddy to the requested group\&. If no group is specified, then the buddy is moved to the default group\&. Tip: if the chatmode is enabled, you can use "/roster alternate" to jump to the moved buddy\&.

.TP
\fB/msay\fR begin|verbatim|send|send_to|toggle|abort
Send a multi\-line message\&. To write a single message with several lines, the \fImulti\-line mode\fR should be used\&.

The \fIbegin\fR subcommand enables multi\-line mode\&. Note that it allows a message subject to be specified\&.

In multi\-line mode, each line (except command lines) typed in the input line will be added to the multi\-line message\&. Once the message is finished, it can be sent to the current selected buddy with the "/msay send" command\&.

The \fIverbatim\fR multi\-line mode disables commands, so that it is possible to enter lines starting with a slash\&. Only the "/msay" command (with send or abort parameters) can be used to exit verbatim mode\&.

The \fItoggle\fR subcommand can be bound to a key to use the multi\-line mode quickly (for example, "bind M13 = msay toggle" to switch using the Meta\-Enter combination)\&.

 \fBbegin\fR [subject]	enter multi\-line mode
 \fBverbatim\fR       	enter verbatim multi\-line mode
 \fBsend\fR           	send the current multi\-line message to the currently selected buddy
 \fBsend_to\fR jid    	send the current multi\-line message to "jid"
 \fBtoggle\fR         	switch to/from multi\-line mode (begin/send)
 \fBabort\fR          	leave multi\-line mode without sending the message

.TP
\fB/rawxml\fR send
 \fBsend\fR string: send string (raw XML format) to the Jabber server\&. No check is done on the string provided\&. BEWARE! Use this only if you know what you are doing, or you could terminate the connection\&.

.TP
\fB/rename\fR nickname
Rename current buddy to the given nickname\&. This command does not work for groups, at the moment (but you can move the buddies to another group with the "/move" command)\&.

.TP
\fB/request\fR time|version [jid]
Send a "IQ" query to the current buddy, or to the specified Jabber user\&. If the resource is not provided with the jid, mcabber will send the query to all known resources for this user\&.

.TP
\fB/room\fR
The room command handles Multi\-User Chat room actions\&.

 \fBjoin\fR room nick     	join "room", using "nick" as nickname\&. If no nickname is provided, the "nickname" option value is used (see sample configuration file)
 \fBleave\fR [message]    	leave the current room
 \fBnames\fR              	display members of the current room
 \fBnick\fR nick          	change your nickname in the current room
 \fBprivmsg\fR nick msg   	send private message "msg" to "nick"
 \fBremove\fR             	remove the current room from the roster (you must have left this room before)
 \fBtopic\fR              	set topic for current room
 \fBunlock\fR             	unlock current room (if you are the owner)
 \fBdestroy\fR [reason]   	destroy the current room (use with care!)
 \fBwhois\fR nick         	display MUC information about "nick"

 \fBinvite\fR jid [reason]	invite jid to the current room
 \fBkick\fR nick [reason] 	kick "nick" from the current room
 \fBban\fR jid [reason]   	ban jid from the current room
 \fBrole\fR jid role [reason]	change jid's role (role can be "none", "visitor", "participant", "moderator")
 \fBaffil\fR jid affil [reason]	change jid's affiliation (affil can be "none", "member", "admin", "owner")

.TP
\fB/roster\fR
The roster command manipulates the roster/buddylist\&.  Here are the available parameters:

 \fBbottom\fR    	jump to the bottom of the roster
 \fBtop\fR       	jump to the top of the roster
 \fBup\fR        	move up in the roster
 \fBdown\fR      	move down in the roster
 \fBhide_offline\fR	hide offline buddies
 \fBshow_offline\fR	show offline buddies
 \fBtoggle_offline\fR	toggle display of offline buddies
 \fBhide\fR      	hide roster (full\-width chat window)
 \fBshow\fR      	show roster
 \fBtoggle\fR    	toggle roster visibility
 \fBsearch\fR bud	search for a buddy with a name or buddy containing "bud" (only in the displayed buddylist)
 \fBalternate\fR 	jump to alternate buddy\&. The "alternate" buddy is the last buddy left while being in chat mode (this command is thus especially useful after commands like "/roster unread_first")
 \fBunread_first\fR	jump to the first unread message
 \fBunread_next\fR	jump to the next unread message

.TP
\fB/say\fR text
Send the "text" message to the currently selected buddy\&. Can be useful if you want to send a message beginning with a slash, for example\&.

.TP
\fB/say_to\fR jid text
Send the "text" message to the specified jid\&. Please note that this command doesn't set the default resource for a contact, so if you want to send several messages to a specific ressource you will have to use "/say_to" for each message\&.

.TP
\fB/status\fR [online|avail|invisible|free|dnd|notavail|away [\-|StatusMessage]]
Show or set the current status\&.

If no status is specified, display the current status\&.

If a status message is specified, it will overrride the message* variables (these variables can be set in the configuration file)\&. If no relevant message* variable is set and no status message provided, the current status message is kept\&. If StatusMessage is "\-", the current status message is cleared\&.

.TP
\fB/status_to\fR jid online|avail|invisible|free|dnd|notavail|away [StatusMessage]
Send the requested status to the specified Jabber user\&.

If the specified jid is "\&.", the current buddy is used\&.

Note: this status will be overridden by subsequent "/status" commands\&. If you are using the auto\-away feature, the status will overridden too\&.

Note: The jid can include a resource (i\&.e\&. user@server/resource)\&.

.TP
\fB/version\fR
Display mcabber version

.SH "CONFIGURATION FILE"


See the provided sample configuration file, which should be self\-documented\&.

.SH "FILES"


The following files can be used by mcabber(1):

.nf

$HOME/\&.mcabber/mcabberrc    Default configuration file
$HOME/\&.mcabberrc            Configuration file used if no other has been found
$HOME/\&.mcabber/histo/       Default directory for storing chat history files, if enabled

.fi

.SH "BUGS"


Certainly\&. Please tell me if you find one! :\-)

.SH "AUTHOR"


Written by Mikael BERTHE <\fImcabber@lilotux.net\fR>\&.
Originally based on cabber (Cabber homepage: <\fIhttp://cabber.sourceforge.net\fR>), please consult the AUTHORS file for details\&.

.SH "RESOURCES"


Main web site: <\fIhttp://www.lilotux.net/~mikael/mcabber/\fR>

.SH "COPYING"


Copyright (C) 2005, 2006 Mikael Berthe\&.

Some portions are Copyright (C) 2002\-2004 <cabber@ajmacias\&.com>\&.


Free use of this software is granted under the terms of the GNU General Public License (GPL)\&.

