'\" t
.\"     Title: mcabber
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 09/18/2016
.\"    Manual: \ \&
.\"    Source: \ \& 1.0.5
.\"  Language: English
.\"
.TH "MCABBER" "1" "09/18/2016" "v1\&.0\&.5"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
mcabber \- a simple Jabber (XMPP) console client
.SH "SYNOPSIS"
.sp
\fImcabber\fR [ \-h | \-V | \-f configfile ]
.SH "DESCRIPTION"
.sp
mcabber(1) is a small Jabber (XMPP) console client\&. For now it needs a configuration file to start, so please copy the sample mcabberrc file and adapt your connection settings\&.
.sp
You also need to have an existing Jabber account to use this software, as it cannot (un)register accounts yet\&.
.sp
Here are some of the features of mcabber:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fISASL/SSL/TLS support\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fIMUC support\fR
(Multi\-User Chat)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fIPGP, OTR support\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fIChat States\fR
support (typing notifications)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fIHistory logging:\fR
If enabled (see the CONFIGURATION FILE section),
mcabber
can save discussions to text history log files\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fICommands completion:\fR
If possible,
mcabber
will try to complete your command line if you hit the Tab key\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fIInput line history:\fR
Any message or command entered is in the input line history and can be reused easily\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fIExternal actions:\fR
Some events (like receiving a message) can trigger an external action such as a shell script if you enable it in your configuration file\&. A sample events script ("eventcmd") is provided with
mcabber
source code, in the contrib directory\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fIModules:\fR
mcabber
can load modules (a\&.k\&.a\&. plugins) at runtime that extend its features\&.
.RE
.SH "OPTIONS"
.PP
\-h
.RS 4
Quick help usage message
.RE
.PP
\-V
.RS 4
Displays
mcabber
version and compile\-time definitions\&.
.RE
.PP
\-f configfile
.RS 4
Use configuration file
\fIconfigfile\fR
.RE
.SH "WINDOWS/PANES"
.sp
The mcabber(1) screen is divided into 4 regions\&. The \fIroster\fR, alias \fIbuddylist\fR, is on the left\&. The \fIchat window\fR, or chat buffer, is on the right\&. The \fIinput line\fR lies at the bottom of the screen, under a small \fIlog window\fR\&.
.sp
Two status lines surround the log window\&. The bottom status line is the "main status line" and reflects mcabber general status\&. The other line is the "chat status line" and shows the status of the currently selected buddy\&.
.sp
To display buddies chat buffers, you will have to enter \fIchat mode\fR\&. You can enter chat mode by pressing enter, and leave chat mode with the ESC key\&. Simply sending a message will also enable chat mode\&.
.sp
There are several advantages to the two\-mode implementation: first, it allows accurate "unread" message functionality, as described in the next section; without this, merely scrolling to a specific buddy will "read" the new messages of all buddies in\-between\&. Second, it allows quickly hiding the conversation with a single keystroke\&. Third, it allows jumping between the few buddies with whom you are conversing with the \fI/roster alternate\fR command described in another section, without having to manually scroll back and forth\&.
.SH "KEYS"
.sp
Text typing occurs in the \fIinput line\fR; basic operations are supported (left arrow, right arrow, home/end keys, insert, delete, backspace\&...)\&.
.sp
PageUp and PageDown keys are used to move in the roster\&.
.sp
Up and Down arrow keys can be used to move in the input line history; they jump to the previous/next line from the history beginning with the same string (from first column to the cursor column)\&.
.sp
To send a message, move to the chosen buddy in the buddylist, type your message and hit enter\&. If the line begins with a slash, this will be interpreted as a command (see the COMMAND section below)\&. Hit escape to leave the chat mode\&.
.sp
Here is a quick description of the default key bindings:
.PP
Esc
.RS 4
Disable chat mode
.RE
.PP
Ctrl\-a
.RS 4
Go to the beginning of the input line
.RE
.PP
Ctrl\-e
.RS 4
Go to the end of the input line
.RE
.PP
Ctrl\-l
.RS 4
Force a refresh
.RE
.PP
Up/Down
.RS 4
Move in the input line history
.RE
.PP
PgUp/PgDown
.RS 4
Move inside the roster (buddylist)
.RE
.PP
Tab
.RS 4
Complete current word, in the input line
.RE
.PP
Ctrl\-g
.RS 4
Cancel completion
.RE
.PP
Ctrl\-c
.RS 4
Abort multi\-line messages and completions
.RE
.PP
Ctrl\-d
.RS 4
Send/terminate a multi\-line message
.RE
.PP
Ctrl\-p/Ctrl\-n
.RS 4
Scroll up/down half a screen in the buffer window (chat mode)
.RE
.PP
Ctrl\-Left
.RS 4
Move the cursor back to the start of the current or previous word
.RE
.PP
Ctrl\-Right
.RS 4
Move the cursor forward to the end of the current or next word
.RE
.PP
Ctrl\-u
.RS 4
Delete from beginning of the line to the cursor
.RE
.PP
Ctrl\-k
.RS 4
Delete from the cursor to the end of line
.RE
.PP
Ctrl\-w
.RS 4
Backward kill word
.RE
.PP
Ctrl\-t
.RS 4
Transpose chars
.RE
.PP
Ctrl\-o
.RS 4
Accept line and put the next history line in the input line (accept\-line\-and\-down\-history)
.RE
.sp
Additional key bindings may be specified using the \fI/bind\fR command described in the COMMANDS section\&.
.SH "MCABBER\(cqS ROSTER"
.sp
The first listed item on the roster is \fI[status]\fR, which keeps a log of everything that appears in the short log window below the main chat area\&. While the log window was designed for showing the latest few elements, the dedicated \fI[status]\fR buffer allows more comfortable viewing of the log, as well as scrolling it in a standard manner\&.
.sp
Group names are displayed above the items that are within them, and are indicated by \fI\-\-\-\fR to the left of the name\&.
.sp
For every real Jabber contact, the roster displays four pieces of information: the buddy\(cqs name or alias, its online status, its authorization status, and whether there are unread messages from the buddy waiting for you\&.
.sp
The online status is one of the following:
.PP
\fIo\fR
.RS 4
online
.RE
.PP
\fIf\fR
.RS 4
free for chat
.RE
.PP
\fIa\fR
.RS 4
away
.RE
.PP
\fIn\fR
.RS 4
not available (labeled
\fIextended away\fR
in some clients)
.RE
.PP
\fId\fR
.RS 4
do not disturb
.RE
.PP
\fI_\fR
.RS 4
offline (or invisible to you)
.RE
.PP
\fI?\fR
.RS 4
unknown, usually meaning you are not authorized to see this buddy\(cqs status
.RE
.PP
\fIx\fR
.RS 4
a conference room in which you are not participating
.RE
.PP
\fIC\fR
.RS 4
a conference room in which you are participating
.RE
.sp
The authorization status indicates whether a buddy is authorized to receive your online status updates, and is displayed by the brackets surrounding the buddy\(cqs online status\&. Square brackets, like \fI[o]\fR, indicate that this buddy is authorized to receive your status\&. Curly braces, like \fI{o}\fR, indicate that they are not authorized to receive your status\&.
.sp
When there are unread messages from a buddy which you have not looked at, a hash mark (\fI#\fR) appears in the leftmost section of the roster for that buddy\&. The hash mark disappears once you view that buddy\(cqs message buffer\&. When the user attention is requested (or when you receive a message containing your nickname in a MUC room), the hash mark is replaced with the \fIattention sign\fR, an exclamation mark (\fI!\fR)\&.
.sp
Examples:
.PP
\fI\-\-\- Buds\fR
.RS 4
This is a group named
\fIBuds\fR
.RE
.PP
\fI#[o] John\fR
.RS 4
John is online, can see your status, and sent you a message that you did not read yet
.RE
.PP
\fI{?} Sally\fR
.RS 4
Neither you nor Sally have authorized each other to see your online status
.RE
.PP
\fI{a} Jane\fR
.RS 4
Jane is away, but she cannot see your online status
.RE
.PP
\fI#[C] x@y\&.c\fR
.RS 4
You are participating in x@y\&.c conference room, and there are unread messages
.RE
.SH "COMMANDS"
.sp
Please refer to the online help (command /help), it is probably more up\-to\-date than this manpage\&. Furthermore, help files have been translated into several languages\&. You will find an overview of the mcabber commands in this manual\&.
.SH "COMMANDS RELATED TO MCABBER"
.PP
/add [jid [nickname]]
.RS 4
Add the "jid" Jabber user to our roster (default group), and send a notification request to this buddy\&. If no nickname is specified, the jid is used\&. If no jid (or an empty string "") is provided or if jid is "\&.", the current buddy is used\&.
.PP
[\fIjid\fR [nickname]]
.RS 4
Add to our roster "jid" as "nickname"
.sp
.if n \{\
.RS 4
.\}
.nf
Example: "/add somebody@jabber\&.server\&.com Somebody"
.fi
.if n \{\
.RE
.\}
.RE
.RE
.PP
/alias [name [= command line]]
.RS 4
This command let you to add aliases which can simplify sophisticated commands\&.

You can manage your aliases by:
.PP
(without arguments)
.RS 4
Print list of currently defined aliases
.RE
.PP
\fIname\fR
.RS 4
Print the value of alias called "name"
.RE
.PP
\fIname\fR=
.RS 4
Unset alias called "name"
.RE
.PP
\fIname\fR = command line
.RS 4
Set alias called "name" with value "command line"
.sp
.if n \{\
.RS 4
.\}
.nf
Example: "/alias away = status away"
.fi
.if n \{\
.RE
.\}
.RE
.RE
.PP
/authorization allow|cancel|request|request_unsubscribe [jid]
.RS 4
This command manages presence subscriptions: it allows you to request presence subscriptions from others on your roster, and allows you to control who receives your presence notifications\&.

If no JID is provided, the currently\-selected buddy is used\&.
.PP
\fIallow\fR
.RS 4
Allow the buddy to receive your presence updates
.RE
.PP
\fIcancel\fR
.RS 4
Cancel the buddy\(cqs subscription to your presence updates
.RE
.PP
\fIrequest\fR
.RS 4
Request a subscription to the buddy\(cqs presence updates
.RE
.PP
\fIrequest_unsubscribe\fR
.RS 4
Request unsubscription from the buddy\(cqs presence updates
.RE
.RE
.PP
/bind [keycode [= command line]]
.RS 4
Bind the command to the key given as "keycode"\&. To examine which keys are currently not used look at
mcabber
log window and press examined key\&. For example: "Unknown key=265" means that you can bind some command to key #265\&.
.PP
(without arguments)
.RS 4
Display list of current bindings
.RE
.PP
\fIkeycode\fR
.RS 4
Display the command line bound to this key
.RE
.PP
\fIkeycode\fR=
.RS 4
Unbind key with code "keycode"
.RE
.PP
\fIkeycode\fR = command line
.RS 4
Bind "command line" to the key with code "keycode"
.sp
.if n \{\
.RS 4
.\}
.nf
Example: "/bind 265 = status away" (265 is F1)\&. +
Note: keycodes can be different depending on your ncurses configuration\&. +
Tip: aliases also can be used instead of commands\&.
.fi
.if n \{\
.RE
.\}
.RE
.RE
.PP
/buffer clear|close|close_all|purge|list, /buffer top|bottom|date|%|search_backward|search_forward, /buffer scroll_lock|scroll_unlock|scroll_toggle, /buffer save filename
.RS 4
Buddy\(cqs buffer manipulation command\&. E\&.g\&. you can search through buffer for "text", clear chat window etc\&.
.PP
\fIclear\fR
.RS 4
Clear the current buddy chat window
.RE
.PP
\fIclose\fR [jid]
.RS 4
Empty all contents of the buffer and close the current buddy chat window
.RE
.PP
\fIclose_all\fR
.RS 4
Empty all contents of the chat buffers and close the chat windows
.RE
.PP
\fIpurge\fR [jid]
.RS 4
Clear the current buddy chat window and empty all contents of the chat buffer
.RE
.PP
\fIlist\fR
.RS 4
Display the list of existing buffers, with their length (lines/blocks)
.RE
.PP
\fItop\fR
.RS 4
Jump to the top of the current buddy chat buffer
.RE
.PP
\fIbottom\fR
.RS 4
Jump to the bottom of the current buddy chat buffer
.RE
.PP
\fIup\fR [n]
.RS 4
Scroll the buffer up [n] lines (default: half a screen)
.RE
.PP
\fIdown\fR [n]
.RS 4
Scroll the buffer down [n] lines (default: half a screen)
.RE
.PP
\fIdate\fR [date]
.RS 4
Jump to the first line after the specified [date] in the chat buffer (date format: "YYYY\-mm\-dd")
.RE
.PP
% n
.RS 4
Jump to position %n of the buddy chat buffer
.RE
.PP
\fIsearch_backward\fR text
.RS 4
Search for [text] in the current buddy chat buffer
.RE
.PP
\fIsearch_forward\fR text
.RS 4
Search for [text] in the current buddy chat buffer
.RE
.PP
\fIscroll_lock\fR
.RS 4
Lock buffer scrolling
.RE
.PP
\fIscroll_unlock\fR
.RS 4
Unlock buffer scrolling
.RE
.PP
\fIscroll_toggle\fR
.RS 4
Toggle buffer scrolling (lock/unlock)
.RE
.PP
\fIsave\fR filename
.RS 4
Save the contents of the current buffer to the file "filename"
.RE
.RE
.PP
/chat_disable [\-\-show\-roster]
.RS 4
Disable chat mode\&.

With \-\-show\-roster, the fullscreen mode will be disabled\&.
.RE
.PP
/clear
.RS 4
This command is actually an alias for "/buffer clear"\&. It clears the current buddy chat window\&.
.RE
.PP
/color roster (status wildcard (color|\-)|clear), /color mucnick nick (color|\-), /color muc (jid|\&.|*) [on|preset|off|\-]
.RS 4
The
\fIcolor\fR
command allows setting dynamic color properties of the screen\&.
.PP
\fIroster\fR clear
.RS 4
Remove all color rules for the roster\&. All roster items will get its default color\&.
.RE
.PP
\fIroster\fR status wildcard color
.RS 4
Set a color rule (or overwrite, if it already exists)\&. The status is string containing all statuses the roster item can have for the rule to match, or * if any status is OK\&. Wildcard is the file\-matching wildcard that will be applied to JID\&. Color is the wanted color\&. If color is \-, the rule is removed\&. If more than one rule matches, the color from the last created (not overwritten) is used\&.
.RE
.PP
\fImucnick\fR nick (color|\-)
.RS 4
Marks the nick to be colored by given color\&. If a MUC has colored nicks, this one will be used\&. If color is \-, the color is marked as chosen automatically, which means it will not be used in
\fIpreset\fR
coloring mode, but will stay the same in
\fIon\fR
coloring mode\&.
.RE
.PP
\fImuc\fR (jid|\&.|*) [on|preset|off|\-]
.RS 4
Sets a MUC nick coloring mode\&. If a jid (\&. means currently selected jid) is provided, the mode will apply to this specific MUC\&. If * is used, it will be applied to all MUCs, except the ones set by their jid\&. Mode
\fIon\fR
colors all nicks,
\fIpreset\fR
only the ones manually set by /color mucnick command and
\fIoff\fR
colors none\&. If not specified, defaults to
\fIon\fR\&. Mode
\fI\-\fR
removes the mode from given JID, which means the global one will apply\&. You can not remove the global mode\&. Default global coloring mode is
\fIoff\fR\&.
.RE
.RE
.PP
/connect
.RS 4
Establish connection to the Jabber server\&.
.RE
.PP
/del
.RS 4
Delete the current buddy from our roster, unsubscribe from its presence notification and unsubscribe it from ours\&.
.RE
.PP
/disconnect
.RS 4
Terminate the connection to the Jabber server\&.

Note: the roster is only available when the connection to the server is active, so the buddylist is empty when disconnected\&.
.RE
.PP
/echo message
.RS 4
Display "message" in the log window\&.
.RE
.PP
/event #n|* accept|ignore|reject [event\-specific arguments], /event list
.RS 4
Tell mcabber what to do about pending events\&.

If the first parameter is
\fI*\fR, the command will apply to all queued events\&.

Event\-specific arguments will be interpreted on event\-to event basis\&. The only built\-in case, when argument is used is MUC invitation reject \- argument, if present, will be interpreted as reject reason\&.
.PP
#N|* accept [event\-specific arguments]
.RS 4
Event number #N/All events will be accepted
.RE
.PP
#N|* ignore [event\-specific arguments]
.RS 4
Event number #N/All events will be ignored
.RE
.PP
#N|* reject [event\-specific arguments]
.RS 4
Event number #N/All events will be rejected
.RE
.PP
\fIlist\fR
.RS 4
List all pending events
.RE
.RE
.PP
/group fold|unfold|toggle [groupname]
.RS 4
This command changes the current group display\&.
.PP
\fIfold\fR [groupname]
.RS 4
Fold (shrink) the current/specified group tree in the roster
.RE
.PP
\fIunfold\fR [groupname]
.RS 4
Unfold (expand) the current/specified group tree in the roster
.RE
.PP
\fItoggle\fR [groupname]
.RS 4
Toggle the state (fold/unfold) of the current/specified tree
.RE
.RE
.PP
/help [command|+topic]
.RS 4
Display help for command "command" or topic "topic"\&.

Example: "/help buffer"
.RE
.PP
/iline fchar|bchar|char_fdel|char_bdel|char_swap, /iline fword|bword|word_bdel|word_fdel, /iline word_upcase|word_downcase|word_capit, /iline hist_beginning_search_bwd|hist_beginning_search_fwd, /iline hist_prev|hist_next, /iline iline_start|iline_end|iline_fdel|iline_bdel, /iline iline_accept|iline_accept_down_hist, /iline compl_do|compl_cancel, /iline send_multiline
.RS 4
Input line commands
.PP
\fIfchar\fR
.RS 4
Move to the next letter
.RE
.PP
\fIbchar\fR
.RS 4
Move to the previous letter
.RE
.PP
\fIchar_fdel\fR
.RS 4
Delete the letter at cursor position
.RE
.PP
\fIchar_bdel\fR
.RS 4
Delete the letter before cursor position
.RE
.PP
\fIchar_swap\fR
.RS 4
Transpose chars
.RE
.PP
\fIfword\fR
.RS 4
Move the cursor forward to the end of the current or next word
.RE
.PP
\fIbword\fR
.RS 4
Move the cursor back to the start of the current or previous word
.RE
.PP
\fIword_bdel\fR
.RS 4
Delete the word from cursor position to its start
.RE
.PP
\fIword_fdel\fR
.RS 4
Delete the word from cursor position to its end
.RE
.PP
\fIword_upcase\fR
.RS 4
Convert the word from cursor position to its end to upper case
.RE
.PP
\fIword_downcase\fR
.RS 4
Convert the word from cursor position to its end to down case
.RE
.PP
\fIword_capit\fR
.RS 4
Capitalize the word from cursor position to its end
.RE
.PP
\fIhist_beginning_search_bwd\fR
.RS 4
Search backward in the history for a line beginning with the current line up to the cursor (this leaves the cursor in its original position)
.RE
.PP
\fIhist_beginning_search_fwd\fR
.RS 4
Search forward in the history for a line beginning with the current line up to the cursor (this leaves the cursor in its original position)
.RE
.PP
\fIhist_prev\fR
.RS 4
Previous line of input line history
.RE
.PP
\fIhist_next\fR
.RS 4
Next line of input line history
.RE
.PP
\fIiline_start\fR
.RS 4
Go to the beginning of the input line
.RE
.PP
\fIiline_end\fR
.RS 4
Go to the end of the input line
.RE
.PP
\fIiline_fdel\fR
.RS 4
Delete from the cursor to the end of line
.RE
.PP
\fIiline_bdel\fR
.RS 4
Delete from beginning of the line to the cursor
.RE
.PP
\fIiline_accept\fR
.RS 4
Accept line
.RE
.PP
\fIiline_accept_down_hist\fR
.RS 4
Accept line and put the next history line in the input line
.RE
.PP
\fIcompl_do\fR
.RS 4
Complete current word, in the input line
.RE
.PP
\fIcompl_cancel\fR
.RS 4
Cancel completion
.RE
.PP
\fIsend_multiline\fR
.RS 4
Send/terminate a multi\-line message
.RE
.RE
.PP
/info
.RS 4
Display info on the selected entry (user, agent, group\&...)\&.

For users, resources are displayed with the status, priority and status message (if available) of each resource\&.
.RE
.PP
/module load|unload [\-f] module, /module info module, /module [list]
.RS 4
Load, unload or show info on module\&.
.PP
\fIload\fR [\-f] module
.RS 4
Loads specified module\&. If \-f flag is specified, most of module loading errors will be ignored\&.
.RE
.PP
\fIunload\fR [\-f] module
.RS 4
Unloads specified module\&. Note: The force flag will not remove any dependency on this module!
.RE
.PP
\fIinfo\fR module
.RS 4
Shows available information about this module\&.
.RE
.PP
[\fIlist\fR]
.RS 4
Lists modules in a format: [modulename] [reference count] ([Manually/Automatically loaded]) [any extra info, like version or dependencies]
.RE
.RE
.PP
/move [groupname]
.RS 4
Move the current buddy to the requested group\&. If no group is specified, then the buddy is moved to the default group\&. If the group "groupname" doesn\(cqt exist, it is created\&.

Tip: if the chatmode is enabled, you can use "/roster alternate" to jump to the moved buddy\&.
.RE
.PP
/msay begin|verbatim|send|send_to|toggle|toggle_verbatim|abort
.RS 4
Send a multi\-line message\&. To write a single message with several lines, the
\fImulti\-line mode\fR
should be used\&.

In multi\-line mode, each line (except command lines) typed in the input line will be added to the multi\-line message\&. Once the message is finished, it can be sent to the current selected buddy with the "/msay send" command\&.

The
\fIbegin\fR
subcommand enables multi\-line mode\&. Note that it allows a message subject to be specified\&.

The
\fIverbatim\fR
multi\-line mode disables commands, so that it is possible to enter lines starting with a slash\&. Only the "/msay" command (with send or abort parameters) can be used to exit verbatim mode\&.

The
\fItoggle\fR
subcommand can be bound to a key to use the multi\-line mode quickly (for example, "bind M13 = msay toggle" to switch using the Meta\-Enter combination)\&.
.PP
\fIbegin\fR [subject]
.RS 4
Enter multi\-line mode
.RE
.PP
\fIverbatim\fR
.RS 4
Enter verbatim multi\-line mode
.RE
.PP
\fIsend\fR [\-n|\-h]
.RS 4
Send the current multi\-line message to the currently selected buddy
.RE
.PP
\fIsend_to\fR [\-n|\-h] jid
.RS 4
Send the current multi\-line message to "jid"
.RE
.PP
\fItoggle\fR|\fItoggle_verbatim\fR
.RS 4
Switch to/from multi\-line mode (begin/send)
.RE
.PP
\fIabort\fR
.RS 4
Leave multi\-line mode without sending the message
.sp
.if n \{\
.RS 4
.\}
.nf
The \-n or \-h flags turn the message to "normal" or "headline" accordingly, as opposed to default "chat" message\&.
.fi
.if n \{\
.RE
.\}
.RE
.RE
.PP
/otr key, /otr start|stop|info [jid], /otr fingerprint [jid [fpr]], /otr smpq|smpr [jid] secret, /otr smpa [jid]
.RS 4
You can use the shortcut\-jid "\&." for the currently selected contact\&.
.PP
\fIkey\fR
.RS 4
Print the fingerprint of your private key to the Status Buffer
.RE
.PP
\fIstart\fR [jid]
.RS 4
Open an OTR channel to the specified jid (or the currently selected contact)
.RE
.PP
\fIstop\fR [jid]
.RS 4
Close the OTR channel to the specified jid (or the currently selected contact)
.RE
.PP
\fIinfo\fR [jid]
.RS 4
Show current OTR status for the specified jid (or the currently selected contact)
.RE
.PP
\fIfingerprint\fR [jid [fpr]]
.RS 4
Show the active fingerprint of an OTR channel\&. If the fingerprint is provided instead of "fpr", the fingerprint will become trusted\&. If you replace "fpr" by some bogus string the fingerprint will loose the trusted status\&.
.RE
.PP
\fIsmpq\fR [jid] secret
.RS 4
Initiate the Socialist Millionaires Protocol with the secret and the buddy
.RE
.PP
\fIsmpr\fR [jid] secret
.RS 4
Respond to the Initiation of the jid with the secret
.RE
.PP
\fIsmpa\fR [jid]
.RS 4
Abort the running Socialist Millionaires Protocol
.RE
.RE
.PP
/otrpolicy, /otrpolicy (default|jid) (plain|manual|opportunistic|always)
.RS 4
You can use the shortcut\-jid "\&." for the currently selected contact\&.
.PP
(without arguments)
.RS 4
Prints all OTR policies to the status buffer
.RE
.PP
(\fIdefault\fR|\fIjid\fR) (plain|manual|opportunistic|always)
.RS 4
Sets either the default policy or the policy for the given jid The plain policy should never be used, because you won\(cqt be able to receive or send any OTR encrypted messages\&. If you set the policy to manual, you or your chat partner have to start the OTR encryption by hand (e\&.g\&. with /otr start)\&. The policy "opportunistic" does that itself by sending a special whitespace\-sequence at the end of unencrypted messages\&. So the other OTR\-enabled chat client knows, that you want to use OTR\&. Note that the first message will always be unencryted, if you use this policy\&. With the policy "always" no message will be sent in plain text\&. If you try to sent the first message unencrypted, mcabber will try to establish an OTR channel\&. Please resend your message, when you get the information that the channel was established\&. If someone sends you plaintext messages while the policy is set to "always", you\(cqll be able to read the message but it won\(cqt be saved to the history\&.
.RE
.RE
.PP
/pgp disable|enable|force|info [jid], /pgp setkey [jid [key]]
.RS 4
This command manipulates PGP settings for the specified jid (by default the currently selected contact)\&.

Please note that PGP encryption won\(cqt be used if no remote PGP support is detected, even if PGP is enabled with this command\&. You can force PGP encryption with the "force" subcommand\&.
.PP
\fIdisable\fR [jid]
.RS 4
Disable PGP encryption for jid (or the currently selected contact)
.RE
.PP
\fIenable\fR [jid]
.RS 4
Enable PGP encryption for jid (or the currently selected contact)
.RE
.PP
\fIforce\fR [jid]
.RS 4
Enforce PGP encryption, even for offline messages, and always assume the recipient has PGP support\&. If a message can\(cqt be encrypted (missing key or key id), the messages won\(cqt be sent at all\&. This option is ignored when PGP is disabled\&.
.RE
.PP
\fIinfo\fR [jid]
.RS 4
Show current PGP settings for the contact
.RE
.PP
\fIsetkey\fR [jid [key]]
.RS 4
Set the PGP key to be used to encrypt message for this contact\&. If no key is provided, the current key is erased\&. You can use the shortcut\-jid "\&." for the currently selected contact\&.
.RE
.RE
.PP
/quit
.RS 4
This command closes all connections and quit mcabber\&.
.RE
.PP
/rawxml send string
.RS 4
Send "string" (raw XML format) to the Jabber server\&.

No check is done on the string provided\&.

BEWARE! Use this only if you know what you are doing, or you could terminate the connection\&.

Example: "/rawxml send <presence><show>away</show></presence>"
.RE
.PP
/rename name
.RS 4
Rename the current buddy or group to the given "name"\&. If "name" is \-, the name is removed from the roster (and mcabber will display the JID or username)\&.
.RE
.PP
/request last|ping|time|vcard|version [jid]
.RS 4
Send a "IQ" query to the current buddy, or to the specified Jabber user\&. If the resource is not provided with the jid, mcabber will send the query to all known resources for this user\&.
.PP
\fIlast\fR
.RS 4
Request "last" information (usually idle time)
.RE
.PP
\fIping\fR
.RS 4
Send an XMPP Ping request\&. Note that you should use the full JID since a ping sent to a bare JID will be handled by the server\&.
.RE
.PP
\fItime\fR
.RS 4
Request time from the buddy
.RE
.PP
\fIvcard\fR
.RS 4
Request VCard from the buddy
.RE
.PP
\fIversion\fR
.RS 4
Request version from the buddy
.RE
.RE
.PP
/room join|leave|names|nick|remove|topic|unlock|destroy, /room privmsg|invite|whois|kick|ban|unban|role|affil, /room setopt print_status|auto_whois [value], /room bookmark [add|del] [\-autojoin|+autojoin] [\-|nick]
.RS 4
The
\fIroom\fR
command handles Multi\-User Chat room actions\&.
.PP
\fIjoin\fR [room [nick [pass]]]
.RS 4
Join "room", using "nick" as nickname\&. If no nickname is provided (or if it is an empty string), the "nickname" option value is used (see sample configuration file)\&. If the currently selected entry is correctly recognized as a room by mcabber, the shortcut "\&." can be used instead of the full room id\&. A password can be provided to enter protected rooms\&. If your nickname contains space characters, use quotes\&.
.RE
.PP
\fIleave\fR [message]
.RS 4
Leave the current room
.RE
.PP
\fInames\fR [\-\-detail|\-\-short|\-\-quiet|\-\-compact]
.RS 4
Display members of the current room
.RE
.PP
\fInick\fR newnick
.RS 4
Change your nickname in the current room
.RE
.PP
\fIprivmsg\fR nick msg
.RS 4
Send private message "msg" to "nick"
.RE
.PP
\fIremove\fR
.RS 4
Remove the current room from the roster (you must have left this room before)
.RE
.PP
\fItopic\fR \-|newtopic
.RS 4
Set topic for current room
.RE
.PP
\fIunlock\fR
.RS 4
Unlock current room (if you are the owner)
.RE
.PP
\fIdestroy\fR [reason]
.RS 4
Destroy the current room (use with care!)
.RE
.PP
\fIwhois\fR nick
.RS 4
Display MUC information about "nick"
.RE
.PP
\fIban\fR jid [reason]
.RS 4
Ban jid from the current room
.RE
.PP
\fIunban\fR jid
.RS 4
Unban jid from the current room
.RE
.PP
\fIinvite\fR jid [reason]
.RS 4
Invite jid to the current room
.RE
.PP
\fIkick\fR nick [reason]
.RS 4
Kick "nick" from the current room
.RE
.PP
\fIrole\fR nick role [reason]
.RS 4
Change nick\(cqs role (role can be "none", "visitor", "participant", "moderator")
.RE
.PP
\fIaffil\fR jid affil [reason]
.RS 4
Change jid\(cqs affiliation (affil can be "none", "member", "admin", "owner")
.RE
.PP
\fIsetopt\fR print_status|auto_whois [value]
.RS 4
Change settings for the current room For print_status, the possible values are "default", "none", "in_and_out", "all"\&. For auto_whois, the possible values are "default", "off", "on"\&. When the value is "default", the options muc_print_status / muc_auto_whois is used\&.
.RE
.PP
\fIbookmark\fR [add|del] [\-autojoin|+autojoin] [\-|nick]
.RS 4
Add, remove or update a bookmark (default is add)\&. If autojoin is set, mcabber will automatically join the MUC room when it connects to the server\&. To see the list of bookmarks, use /room bookmark in the status buffer\&.
.RE
.RE
.PP
/roster bottom|top|up|down|group_prev|group_next, /roster alternate|unread_first|unread_next, /roster search bud, /roster display|hide_offline|show_offline|toggle_offline, /roster item_lock|item_unlock|item_toggle_lock, /roster hide|show|toggle, /roster note [\-|text]
.RS 4
The
\fIroster\fR
command manipulates the roster/buddylist\&.

Here are the available parameters:
.PP
\fIbottom\fR
.RS 4
Jump to the bottom of the roster
.RE
.PP
\fItop\fR
.RS 4
Jump to the top of the roster
.RE
.PP
\fIup\fR [n]
.RS 4
Move up [n lines] in the roster
.RE
.PP
\fIdown\fR [n]
.RS 4
Move down [n lines] in the roster
.RE
.PP
\fIgroup_prev\fR
.RS 4
Jump to the previous group in the roster
.RE
.PP
\fIgroup_next\fR
.RS 4
Jump to the next group in the roster
.RE
.PP
\fIalternate\fR
.RS 4
Jump to alternate buddy\&. The "alternate" buddy is the last buddy left while being in chat mode\&. This command is thus especially useful after commands like "/roster unread_next" (Ctrl\-q)\&.
.RE
.PP
\fIunread_first\fR
.RS 4
Jump to the first unread message
.RE
.PP
\fIunread_next\fR
.RS 4
Jump to the next unread message
.RE
.PP
\fIsearch\fR bud
.RS 4
Search for a buddy with a name or jid containing "bud" (only in the displayed buddylist)
.RE
.PP
\fIdisplay\fR [mask]
.RS 4
See or update the roster filter\&. The mask should contain the shortcut letters of the status you want to see ([o]nline, [f]ree_for_chat, [d]o_not_disturb, [n]ot_available, [a]way, [_]offline)\&. For example "ofdna" to display only connected buddies\&.
.RE
.PP
\fIhide_offline\fR
.RS 4
Hide offline buddies (same as /roster display ofdna)
.RE
.PP
\fIshow_offline\fR
.RS 4
Show offline buddies (same as /roster display ofdna_)
.RE
.PP
\fItoggle_offline\fR
.RS 4
Toggle display of offline buddies
.RE
.PP
\fIitem_lock\fR [jid]
.RS 4
Lock the roster item so it remains visible regardless of its status
.RE
.PP
\fIitem_unlock\fR [jid]
.RS 4
Undo the effects of item_lock
.RE
.PP
\fIitem_toggle_lock\fR [jid]
.RS 4
Invert the current lock flag
.RE
.PP
\fIhide\fR
.RS 4
Hide roster (full\-width chat window)
.RE
.PP
\fIshow\fR
.RS 4
Show roster
.RE
.PP
\fItoggle\fR
.RS 4
Toggle roster visibility
.RE
.PP
\fInote\fR [\-|text]
.RS 4
Set/update/delete an annotation\&. If there is no text, the current item\(cqs annotation is displayed \(em if you are in the status buffer, all notes are displayed\&. If text is "\-", the note is erased\&.
.RE
.RE
.PP
/say [\-n|\-h|\-\-] text
.RS 4
Send the "text" message to the currently selected buddy\&. It can be useful if you want to send a message beginning with a slash, for example\&.

The "\-n" flag turns the message to "normal" type, "\-h" to "headline"\&. "\-\-" can be used to send chat message beginning with \-n or \-h\&.
.RE
.PP
/say_to [\-n|\-h] [\-q] [\-f file] jid text
.RS 4
Send the "text" message to the specified jid\&.

Please note that this command doesn\(cqt set the default resource for a contact, so if you want to send several messages to a specific resource you will have to use "/say_to" for each message\&.

You can send a message to a specific resource of the currently selected contact by using /say_to ./resourcename message\&.

The "\-n" flag turns the message to "normal" type, "\-h" to "headline"\&. "\-\-" can be used to send chat messages beginning with \-n or \-h\&.

When "\-q" is used, the message will be sent in the background and will not change the current active window\&.

A text file can be provided with the "\-f" switch (in which case there\(cqs no need to pass a text argument after the jid, of course)\&.
.RE
.PP
/screen_refresh
.RS 4
Refresh the mcabber screen\&.
.RE
.PP
/set [option [= value]]
.RS 4
Display or set an option value\&.

Without arguments prints a list of all set options with their values
.RE
.PP
/source pattern
.RS 4
Read configuration files, that match glob pattern (sorted in alphabetical order)\&.
.RE
.PP
/status [online|avail|free|dnd|notavail|away [\-|statusmessage]], /status message \-|statusmessage
.RS 4
Show or set the current status\&.

If no status is specified, display the current status\&.

If a status message is specified, it will overrride the message* variables (these variables can be set in the configuration file)\&.

If no relevant message* variable is set and no status message provided, the current status message is kept\&.

If StatusMessage is "\-", the current status message is cleared\&.

With the "/status message" command, mcabber will update the message while preserving the status\&.
.RE
.PP
/status_to jid online|avail|free|dnd|notavail|away [statusmessage], /status_to jid message statusmessage
.RS 4
Send the requested status to the specified Jabber user\&.

If the specified jid is "\&.", the current buddy is used\&.

Note: this status will be overridden by subsequent "/status" commands\&. If you are using the auto\-away feature, the status will overridden too\&.

Note: The jid can include a resource (i\&.e\&. user@server/resource)\&.
.RE
.PP
/version
.RS 4
Display current version of mcabber\&.
.RE
.SH "CONFIGURATION FILE"
.sp
See the provided sample configuration file, which should be self\-documenting\&.
.SH "FILES"
.sp
The following files can be used by mcabber(1):
.sp
.if n \{\
.RS 4
.\}
.nf
$HOME/\&.mcabber/mcabberrc    Default configuration file
$HOME/\&.mcabberrc            Configuration file used if no other has been found
$HOME/\&.mcabber/histo/       Default directory for storing chat history files, if enabled
/usr/share/mcabber/help/    Default directory for online help files
/usr/lib/mcabber/           Default directory for modules
.fi
.if n \{\
.RE
.\}
.SH "BUGS"
.sp
Certainly\&. Please tell me if you find one! :\-) Please visit our website to find out about the MUC room and the bug tracker\&.
.SH "AUTHOR"
.sp
Written by \m[blue]\fBMikael BERTHE\fR\m[]\&\s-2\u[1]\d\s+2 and others (see AUTHORS file)\&.
.SH "RESOURCES"
.sp
\m[blue]\fBMain web site\fR\m[]\&\s-2\u[2]\d\s+2
.sp
\m[blue]\fBOfficial wiki\fR\m[]\&\s-2\u[3]\d\s+2
.sp
\m[blue]\fBMCabber MUC room\fR\m[]\&\s-2\u[4]\d\s+2
.SH "COPYING"
.sp
Copyright (C) 2005\-2016 Mikael Berthe and others\&.
.sp
Free use of this software is granted under the terms of the GNU General Public License (GPL)\&.
.SH "NOTES"
.IP " 1." 4
Mikael BERTHE
.RS 4
\%mailto:mikael@lilotux.net
.RE
.IP " 2." 4
Main web site
.RS 4
\%http://mcabber.com/
.RE
.IP " 3." 4
Official wiki
.RS 4
\%http://wiki.mcabber.com/
.RE
.IP " 4." 4
MCabber MUC room
.RS 4
\%xmpp:mcabber@conf.lilotux.net
.RE
